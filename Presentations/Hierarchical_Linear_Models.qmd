---
title: "Linear and Hierarchical Linear Models"
subtitle: "Mixed Models, and Multilevel Models, GLMMs, etc..."
author:   
  - Camila Pacheco    
  - Katr√≠n Bj√∂rnsd√≥ttir
format:
  revealjs:
    theme: blood
    fontsize: 2.1em
    incremental: true
    css: styles.css
    aspectratio: 169
    scrollable: true
    transition: fade
    highlight-style: monokai
    # html:
    #  toc: true
    #  html-math-method: katex
    #  code-line-numbers: false
---

## Today

-   Linear Models
-   What are hierarchical linear models
-   Identify situations in which the use of mixed effects is appropriate
-   Implement basic linear mixed models (LMM) with `R`
-   Break {{< fa face-smile >}}
-   Practice

::: fragment
<img src="https://media1.tenor.com/m/oTeBa4EVepMAAAAC/business-cat-working.gif"/>
:::

## Required Material

https://github.com/lacapary/BIO503/

## Required Material

You are required to have downloaded and installed

```{r}
#| output: false
#| eval: false
#| echo: true

install.packages(c("lme4",
                      "ggeffects",
                      "MuMin",
                      "emmmeans"
                      ))
```

## Required Material

::: v-center-container
<h4>Do not hesitate to ask questions!</h4>
:::

## Linear models

What is a linear model?

-   A mathematical tool used to describe the relationship between a *response variable* and an *explanatory variable*.

-   In the simplest form is expressed as:\

-   $Y = \beta_0 + \beta_1 X + \varepsilon$.

## Linear models

A simple example:

Does soil nitrogen content influence plant productivity?

<p style="font-size: 1.2em;">

Plant biomass = Œ≤‚ÇÄ + Œ≤‚ÇÅ ¬∑ Soil nitrogen + Œµ

</p>

## Linear Models

A simple example:

Does soil nitrogen content influence plant productivity?

<p style="font-size: 1.2em;">

[Plant biomass]{style="color: red; font-weight: bold;"} = Œ≤‚ÇÄ + Œ≤‚ÇÅ ¬∑ Soil nitrogen + Œµ

</p>


## Linear Models

A simple example:

Does soil nitrogen content influence plant productivity?

<p style="font-size: 1.2em;">

Plant biomass = Œ≤‚ÇÄ + Œ≤‚ÇÅ ¬∑ [Soil nitrogen]{style="color: red; font-weight: bold;"} + Œµ

</p>


## Linear models

```{r, echo = FALSE, message = FALSE}
n <- 100  
soil_nitrogen <- rnorm(n, mean = 10, sd = 3)  
beta_0 <- 5 
beta_1 <- 2   
epsilon <- rnorm(n, mean = 0, sd = 1)  
plant_biomass <- beta_0 + beta_1 * soil_nitrogen + epsilon  

data <- data.frame(SoilNitrogen = soil_nitrogen, PlantBiomass = plant_biomass)

model <- lm(PlantBiomass ~ SoilNitrogen, data = data)

intercept <- coef(model)[1]
slope <- coef(model)[2]

equation <- paste("y = ", round(intercept, 2), " + ", round(slope, 2), "x", sep = "")

library(ggplot2)

ggplot(data, aes(x = SoilNitrogen, y = PlantBiomass)) +
  geom_point(color = "#374558", size = 2) + 
  geom_smooth(method = "lm", color = "#A7B5C8", se = FALSE, linewidth = 1.5) +  
  labs(title = "Relationship between Soil Nitrogen and Plant Biomass",
       x = "Soil Nitrogen",
       y = "Plant Biomass") +
  theme_classic() +
  annotate("text", x = 3, y = 35, label = equation, color = "black", size = 7, hjust = 0)


```

## Linear models

Why do we use linear models in ecology?

-   Ecological systems are *complex*, but linear models give us a *simplified* framework to ask and answer key ecological questions.

    -   ‚úÖ Simple and interpretable: Easy to understand and communicate.\
    -   ‚úÖ Flexible: Can be extended, multiple predictors, interactions etc.\
    -   ‚úÖ Hypothesis testing: Relationships based on ecological theory.\
    -   ‚úÖ Data-driveen: Test ecological hypotheses with real-world data.\
    -   ‚úÖ Foundation for advanced models.

## Data for this part of the session

```{r, echo=FALSE, out.width="80%"}
knitr::include_graphics("https://static1.srcdn.com/wordpress/wp-content/uploads/2022/08/Illustrations-of-various-dragons-from-Dungeons-and-Dragons.jpg")
```

[Coding Club Mixed models](https://ourcodingclub.github.io/tutorials/mixed-models/)

## Explore the data

```{r}
#| output: true
#| eval: true
#| echo: true
library(tidyverse)
load("CC-Linear-mixed-models/dragons.RData")

dragons_Bavarian <- dragons |> 
  filter(mountainRange == "Bavarian")

```

## Explore the data

```{r, echo = TRUE}
head(dragons_Bavarian)
```

## Explore the data

```{r, echo = TRUE}
hist(dragons_Bavarian$testScore)
```

## Our question

How does body size of dragons influence their intelligence?

## Our question

How does body size of dragons influence their intelligence?

First we will plot our DAG:

```{r, echo = FALSE, message = FALSE}
#| message: false
library(ggdag)
library(tidyverse)

# Define a DAG
dag_data <- dagify(
  IQ ~ Size,
  exposure = "Size",
  outcome = "IQ",
  labels = c(
    Size = "Dragon body length",
    IQ = "IQ - Test score"
  )
)

ggdag_parents(dag_data, .var = "IQ",text = FALSE,use_labels = "label") +
  theme_dag() +
  scale_fill_manual(values = c("#c0392b","#a569bd"))+
  scale_color_manual(values = c("#a569bd","#c0392b"))+
  theme(legend.position ="none")
```

## Our question

How does body size of dragons influence their intelligence?

Then our model:

<p style="font-size: 1.2em;">

Test score = Œ≤‚ÇÄ + Œ≤‚ÇÅ ¬∑ Body length + Œµ

</p>

## Our question

Now lets visualize the relationship using ggplot.

```{r echo=TRUE}
(p <- dragons_Bavarian %>% 
  ggplot(aes(
    x = bodyLength,
    y = testScore)) + # to assign a color to each group
  geom_point() + 
  stat_smooth(method = "lm") +    
  theme_classic() +
  labs(
    x = "Body length",
    y = "Test score")
)
```

## Our question

Now lets visualize the relationship using ggplot.

```{r echo=FALSE}
(p <- dragons_Bavarian %>% 
  ggplot(aes(
    x = bodyLength,
    y = testScore)) + # to assign a color to each group
  geom_point() + 
  stat_smooth(method = "lm") +    
  theme_classic() +
  labs(
    x = "Body length",
    y = "Test score")
)
```

## Lets model it

```{r, echo = TRUE}

basic.lm <- lm(testScore ~ bodyLength, data = dragons_Bavarian)
summary(basic.lm)

```

## Factorial ANOVA: It‚Äôs Just a Linear Model

- *Factorial ANOVA* is a special kind of analysis used when you have two or more categorical predictors.

- But in R, you don‚Äôt need a special ANOVA function. You can just use the  `lm()` function.

- That‚Äôs because factorial ANOVA is just a *linear model* with categorical predictors.

## Factorial ANOVA: Example

Using the `iris` data set.

This fits a linear model where Species is treated as a factor.

```{r echo=TRUE}
model <- lm(Sepal.Length ~ Species, data = iris)
summary(model)
```

## Factorial ANOVA: Example

When we run the ANOVA, we're checking if the average sepal length is about the same for all the species, or if at least one species is different from the others.

```{r echo=TRUE}
anova(model)
```

## Factorial ANOVA: Post-Hoc Analysis

- Let‚Äôs say we run an ANOVA and find a significant result. 

- The test: "There‚Äôs a difference somewhere"
- The post-hoc test: "Who‚Äôs different from who"


```{r echo=TRUE}
library(emmeans)
# Get estimated marginal means
em <- emmeans(model, ~ Species)

# Pairwise comparisons with Tukey adjustment
pairs(em, adjust = "tukey")
```
## Factorial ANOVA: Post-Hoc Analysis

::: callout-important
 Use post-hoc tests only if your ANOVA result is significant. 
:::

```{r}
ggplot(iris, aes(x = Species, y = Sepal.Length)) +
  geom_boxplot(fill = "#fc91b8") +
  labs(
    title = "Sepal Length by Species",
    x = "Species",
    y = "Sepal Length"
  ) +
  theme_minimal()
```


## Generalize linear models

Get familiar with different data distributions Here is a brief summary of the data distributions you might encounter most often.

-   Gaussian - Continuous data (normal distribution and homoscedasticity assumed)
-   Poisson - Count abundance data (integer values, zero-inflated data, left-skewed data)
-   Binomial - Binary variables (TRUE/FALSE, 0/1, presence/absence data)

::: fragment
Choosing the right statistical test for your analysis is an important step about which you should think carefully.
:::

## Generalize linear models

::: {style="background-color:white; display:inline-block; padding: 10px;"}
![lm which](https://ourcodingclub.github.io/assets/img/tutorials/modelling/DL_intro_lm_which.png)
:::

## Generalize linear models

Syntax for a model with poisson (count) distribution

```{r}
#| output: false
#| eval: false
#| echo: true

glm(y ~ x, family = poisson, data = df)
  
```

Syntax for a model with binomial distribution

```{r}
#| output: false
#| eval: false
#| echo: true
glm(y ~ x, family = binomial, data = df)
  
```


## BREAK

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("https://assets-global.website-files.com/647888ca92d03e3fca3f1ea0/647888ca92d03e3fca3f2376_shutterstock_792140977.jpg")
```

## Hierarchical Linear Models

## Ecological and biological data can be complex!

-   Hierarchical structure in the data

-   Many covariates and grouping factors

-   Unbalanced study/experimental design

## Hierarchical structres example

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("Hierarchical_Linear_Models_files/Figures/hierarchical_example.png")
```

## What is Independence Assumption?

In basic statistical models, we assume each observation gives us **new, independent information**.

::: fragment
*What happens in one sample shouldn't depend on what happened in another.*
:::

## Hierarchical structres in ecology

- Measurements from the **same plot or site** are often more similar.
- Observations from the **same species** might behave similarly.
- Samples collected **close in time or space** can be correlated.

::: fragment
### Analogy üí°

> Measuring the same tree's height 3 times isn't the same as measuring 3 different trees.

::: fragment
We call this **dependence** ‚Äî and we need special models to handle it!
:::
::: 
## Diagnosing dependence

Ask yourself:

**Are there clusters in my data?**

Are data points grouped by site, species, individual, or time?

## How could we analyze this data?

We need to account for correlation in the data.

- LINEAR MIXED MODELS 

::: fragment
The *random effects* structure will aid correct inference about *fixed effects*, depending on which level of the system‚Äôs hierarchy is being manipulated.
:::

-   What is random effects ?
-   What is fixed effects?
-   When to used them ?

## Fixed effects : deterministic processes

-   They are like drivers, categories or groups that you think might directly influence the outcome you're studying.

-   They're called "*fixed*" because you want to estimate the effect of each level

-   `"I want to know how these different things (fixed effects) affect the outcome."`

## Random effects : stochastic processes

-   Name random doesn‚Äôt have much to do with mathematical randomness
-   Grouping variables you want to control for
-   You're not interested in each level individually
-   but we know that they might be influencing the patterns we see
-   `"I want to know how these factors (random effects) contribute to the overall variation in the outcome."`
-   They are always categorical

- Examples: Site, Observer, Year

## When do we use them?

- Whenever your data has hierarchical structure.

- The choice depends on the research question

- Is the variable a source of variation or the target of inference?

## Active break üí°

Scenario: You measured plant height across 6 sites, with different treatments at each site.

Questions:

- What could be a fixed effect?

- What could be a random effect?

- What would happen if you ignored site?


## Dragon data

```{r}
#| output: false
#| eval: true
#| echo: false
library(tidyverse)
load("CC-Linear-mixed-models/dragons.RData")

dragons<- dragons |> 
  mutate(bodyLength2=scale(bodyLength,center = TRUE, scale = TRUE))
```


We went to the field and sampled more mountains with dragons. 

```{r}
#| output: true
#| eval: true
#| echo: false
dragons |> group_by(mountainRange,site) |> 
  summarise(samples=n())
```

### Research question 
::: v-center-container
<h4>Is the test score affected by body length?</h4>
:::
## Dragons Linear model

```{r}
#| output: true
#| eval: true
#| echo: true
basic.lm <- lm(testScore ~ bodyLength2, data = dragons)
summary(basic.lm)
```

## Dragons Linear model

```{r}
#| output: true
#| eval: true
#| echo: true
(prelim_plot <- ggplot(dragons, aes(x = bodyLength, y = testScore)) +
  geom_point() +
  geom_smooth(method = "lm"))+
  theme_classic()
```


## Assumptions check

```{r}
#| output: true
#| eval: true
#| echo: true
qqnorm(resid(model)); qqline(resid(model))
```

## Assumptions check

::: v-center-container
<h4>Are our data independent?</h4>
:::

```{r}
library(ggdag)
dag_data <- dagify(
  testScore ~ bodyLength2 + site,
  site ~ mountainRange,
  exposure = "bodyLength2",
  outcome = "testScore",
  latent = c("site", "mountainRange")
) %>%
  tidy_dagitty()

dag_data <- dag_data %>%
  mutate(label = case_when(
    name == "testScore" ~ "Test Score",
    name == "bodyLength2" ~ "Body Length",
    name == "site" ~ "Site (RE)",
    name == "mountainRange" ~ "Mountain Range (RE)",
    TRUE ~ name
  ))

ggdag_parents(dag_data, .var = "testScore", text = FALSE, use_labels = "label") +
  theme_dag() +
  scale_fill_manual(values = c("#c0392b", "#a569bd")) +
  scale_color_manual(values = c("#a569bd", "#c0392b")) +
  theme(legend.position = "none")
```

- They are Hierarchical!
- Our research question:
  - Does a dragon's body length predict its test score, after accounting for variation across mountain ranges?

## Assumptions check

```{r}
#| output: true
#| eval: true
#| echo: true

(colour_plot <- ggplot(dragons, aes(x = bodyLength, y = testScore, colour = mountainRange)) +
  geom_point(size = 2) +
  theme_classic() +
  theme(legend.position = "none"))
```

## How to implement mixed models in R?

-   Step 1: Model building
-   Step 2: Model validation
-   Step 3: Model interpretation
-   Step 4: Model visualization

## Step 1: Model building

Hierarchical linear models do is they essentially fit a separate regression line for each and every cluster. And then estimates what we call the *Fixed slope*. Average slope between x and y across my clusters.


## Step 1: Model building Dragons

```{r}
#| output: true
#| eval: true
#| echo: true
#| code-line-numbers: "|1|2|3|4|5"
library(lme4) #"linear mixed model" function from lme4 package
mixed.lmer <- lmer(testScore ~ bodyLength2 +
                     (1|mountainRange/site), #random effect
                   data = dragons,
                   REML = TRUE #estimation method other method ML but it has a bias
                   )
```
## Step 2: Model validation Dragons

Assumptions check

```{r}
#| output: true
#| eval: true
#| echo: true
qqnorm(resid(mixed.lmer))
qqline(resid(mixed.lmer))
```


## Step 3: Model interpreation Dragons
```{r}
summary(mixed.lmer)

```

```{r}
#| output: true
#| eval: true
#| echo: true
library(MuMIn)
r.squaredGLMM(mixed.lmer)
```


## Step 4. Visualization

```{r}
#| output: true
#| eval: true
#| echo: true
#| code-line-numbers: "1|3-4|6"
library(ggeffects)

# Extract the prediction data frame
pred.mm <- ggpredict(mixed.lmer, terms = c("bodyLength2"))  # this gives overall predictions for the model
head(pred.mm)
```

## Step 4. Visualization

```{r}
#| output: false
#| eval: true
#| echo: true
#| code-line-numbers: "|3-4|5-13|13-17"

# Plot the predictions 
p<-ggplot(pred.mm) +
    # slope
    geom_line(aes(x = x, y = predicted)) +
    # error band
    geom_ribbon(
      aes(
        x = x,
        ymin = predicted - std.error,
        ymax = predicted + std.error
      ),
      fill = "lightgrey",
      alpha = 0.5
    ) +
    # adding the raw data (scaled values)
    geom_point(data = dragons,                      
               aes(x = bodyLength2, y = testScore, colour = mountainRange)) +
    labs(x = "Body Length (indexed)",
         y = "Test Score",
         title = "Body length does not affect intelligence in dragons") +
    theme_minimal()

```

## Step 4. Visualization

```{r}
#| output: true
#| eval: true
#| echo: false
p
```

## Step 4. Visualization

```{r}
#| output: true
#| eval: true
#| echo: true
#| code-line-numbers: "|3|4"
p<-
  ggpredict(mixed.lmer, terms = c("bodyLength2", "mountainRange"),
            type = "random") %>% 
   plot(show_ci = FALSE) +
   labs(x = "Body Length", y = "Test Score", 
        title = "Effect of body size on intelligence in dragons") + 
   theme_minimal()
```

## Step 4. Visualization

```{r}
#| output: true
#| eval: true
#| echo: false
p
```


## Random slopes and Random intercept

::: {.fragment .fade-in}
A random-intercept model allows each cluster (e.g. population) to have its own starting point ‚Äî some may be smarter or dumber overall.
:::

::: {.fragment .fade-in}
A random-slope model goes further: it lets the effect of a predictor (like body length) vary across clusters. So, one population might show a strong link between body length and intelligence, while another shows little or none.
:::

## Random slopes and Random intercept

We only need to make one change to our model to allow for random slopes as well as intercept, and that‚Äôs adding the fixed variable into the random effect brackets:

```{r}
#| output: true
#| eval: true
#| echo: true
#| code-line-numbers: "|2"
mixed.ranslope <- lmer(testScore ~ bodyLength2 +
                         (1 + bodyLength2|mountainRange/site), 
                       data = dragons) 

summary(mixed.ranslope)
```

## Random slopes

```{r}
#| output: true
#| eval: true
#| echo: false
(mm_plot <- ggplot(dragons, aes(x = bodyLength, y = testScore, colour = site)) +
      facet_wrap(~mountainRange, nrow=2) +   # a panel for each mountain range
      geom_point(alpha = 0.5) +
      theme_classic() +
      geom_line(data = cbind(dragons, pred = predict(mixed.ranslope)), aes(y = pred), size = 1) +  # adding predicted line from mixed model 
      theme(legend.position = "none",
            panel.spacing = unit(2, "lines"))  # adding space between panels
)
```


## Crossed effects

Example:

10 control \| 10 experimental

-   3 years

-   Each season

-   20 beds

-   50 seedlings

-   5 leaves

-   5 leaves x 50 seedlings x 20 beds x 4 seasons x 3 years = 60 000 measurements per treatment

- *Very hot summer in the second year*

## Crossed effects
```{r}
library(ggdag)
dag_data <- dagify(
  leafLength ~ treatment + Leaf + Season,
  Leaf ~ Plant,
  Plant ~ Bed,
  exposure = "treatment",
  outcome = "leafLength",
  latent = c("Leaf", "Plant", "Bed", "Season")  # Show as latent (random effect)
) %>%
  tidy_dagitty()

dag_data <- dag_data %>%
  mutate(label = case_when(
    name == "leafLength" ~ "Leaf Length",
    name == "treatment" ~ "Treatment",
    name == "Leaf" ~ "Leaf (RE)",
    name == "Plant" ~ "Plant (RE)",
    name == "Bed" ~ "Bed (RE)",
    name == "Season" ~ "Season (RE)",
    TRUE ~ name
  ))

ggdag_parents(dag_data, .var = "leafLength", text = FALSE, use_labels = "label") +
  theme_dag() +
  scale_fill_manual(values = c("#c0392b", "#a569bd")) +
  scale_color_manual(values = c("#a569bd", "#c0392b")) +
  theme(legend.position = "none")
```

```{r} 
#| output: false
#| eval: false
#| echo: true

leafLength ~ treatment + (1|Bed/Plant/Leaf)
```


What about the crossed effects ?

::: fragment
Crossed (or partially crossed) random factors that do not represent levels in a hierarchy.

```{r}   
#| output: false
#| eval: false
#| echo: true

leafLength ~ treatment + (1|Bed/Plant/Leaf) + (1|Season)
```
:::

## Additional ressources

Popular libraries for (G)LMMs:

-   Frequentist : `nlme`, `lme4`, `glmmTMB`

-   Bayesian : `brms`, `rstan`, `rstanarm`, `MCMCglmm`

-   Nice visualization : [link](https://mfviz.com/hierarchical-models/)

-   Most of the material comes from : [Coding Club](https://ourcodingclub.github.io/)

## BREAK

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("https://assets-global.website-files.com/647888ca92d03e3fca3f1ea0/647888ca92d03e3fca3f2376_shutterstock_792140977.jpg")
```

## Exercise

Now let's practice ...

::: fragment
<img src="https://media1.tenor.com/m/hHaVzeiH-hcAAAAC/imsickofwork-technologysu-x.gif"/>
:::

## ITEX

We will be using a dataset from the ITEX network.

-   ITEX is a long-term warming experiment that uses standardized protocols to examine impacts of warming on Arctic ecosystems.

-   Established in the 1990s - vegetation monitoring over three decades.

-   Uses a simple method that is easy to establish in the field - open top chambers

::: fragment
```{r, echo=FALSE, out.width="20%"}
knitr::include_graphics("Hierarchical_Linear_Models_files/Figures/otc.png")
```
:::

## ITEX

```{r, echo=FALSE, out.width="100%"}
knitr::include_graphics("Hierarchical_Linear_Models_files/Figures/audkuluheidi.JPG")
```

## Let's look at the data

```{r, echo=TRUE}
itex <- read_csv("Data/ITEX_diversity_data.csv")
```

::: fragment
```{r, echo=TRUE}
head(itex)
```
:::

::: fragment
```{r, echo=TRUE}
length(unique(itex$SITE)) #this code tells you how many different samples we have within the SITE column
```
:::

::: fragment
```{r, echo=TRUE}
unique(itex$SITE) #you can also do this and then it gives you the name of all samples within the SITE column
```
:::

## Exercise 1

Modeling Diversity and Temperature
Using the  **ITEX diversity dataset **, explore the relationship between **plant diversity** and **temperature** across different sites.

### üëâ Your Tasks:

1. **Model Planning**:
   - What is your **response variable**?
   - Which variables make sense as **fixed effects**?
   - Which variable(s) should be treated as **random effects** (e.g., site, year)?

2. **Fit the Model**:
   - Use `lmer()` to fit a model to the data.
   - Look at the output with `summary()`.

3. **Reflect**:
   - Does the model structure reflect **how the data was collected**?
   - Does the summary output **make sense** given your sampling design?

## Exercise 2

What is the relationship between diversity and temperature **within sites**?

Now that you've explored overall patterns, focus your model on how **temperature affects diversity within each site**.

#### üëâ Your Tasks:

1. - What changes when we ask about relationships *within sites* instead of *across* them?
   - Should you adjust the way `site` is treated in your model?

2. **Model Check**:

3. **Fit a New Model (if needed)**:
   - Update your `lmer()` call to reflect this new focus.
   - Reinterpret the output

```{r eval=FALSE, echo=FALSE }
renderthis::to_pdf("Hierarchical_Linear_Models.html")
```
